@page "/Tecnico/Create"
@inject NavigationManager navigationManager
@inject TecnicoServices tecnicosService
@rendermode InteractiveServer

<PageTitle>Crear Técnico</PageTitle>

<EditForm Model="Tecnico" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <label class="text-danger">@Message</label>
    <div class="container">
        <div class="card shadow-lg">
            <div class="card-header text-center bg-primary text-white border-bottom-0">
                <h5 class="card-title ">Crear Técnico</h5>
            </div>

            <div class="card-body">

                <div class="mb-3">
                    <label for="id" class="form-label">Técnico ID</label>
                    <input class="form-control" value="@ProximoId" disabled />
                </div>

                <div class="mb-3">
                    <label class="form-label"><strong>Nombres</strong></label>
                    <InputText class="form-control" @bind-Value="Tecnico.Name" />
                    <ValidationMessage For="@(() => Tecnico.Name)" />
                </div>

                <div class="mb-3">
                    <label class="form-label"><strong>Sueldo por hora</strong></label>
                    <InputNumber class="form-control" @bind-Value="Tecnico.sueldo" />
                    <ValidationMessage For="@(() => Tecnico.sueldo)" />
                </div>

            </div>

            <div class="card-footer text-center mt-2">
                <button type="button" class="btn btn-outline-primary" @onclick="Nuevo">
                    <i class="bi bi-plus-lg"></i>Nuevo
                </button>

                <button type="submit" class="btn btn-outline-success"> Guardar</button>
                <a href="/Tecnico/Index" class="btn btn-outline-danger">
                    <span class="bi bi-arrow-left"></span> Volver
                </a>
            </div>
        </div>
    </div>
</EditForm>


@code {
    public RegistroTecnicoPostgre.Models.Tecnico Tecnico { get; set; } = new RegistroTecnicoPostgre.Models.Tecnico();
    private string Message { get; set; } = string.Empty;
    private int ProximoId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        ProximoId = await ObtenerSiguienteId();
    }

    private async Task<int> ObtenerSiguienteId()
    {
        var lista = await tecnicosService.Listar(t => true);
        if (lista == null || !lista.Any())
            return 1;

        return lista.Max(t => t.TecnicoId) + 1;
    }

    public async Task Guardar()
    {
        if (await tecnicosService.ExisteNombre(Tecnico.Name))
        {
            Message = "Ya existe un técnico con este nombre. Por favor, elige un nombre diferente.";
            return;
        }

        var creado = await tecnicosService.Guardar(Tecnico);

        if (creado)
        {
            await Nuevo();
        }

    }

    public async Task Nuevo()
    {
        Message = string.Empty;
        Tecnico = new RegistroTecnicoPostgre.Models.Tecnico();
        ProximoId = await ObtenerSiguienteId();
        StateHasChanged();
    }
}
