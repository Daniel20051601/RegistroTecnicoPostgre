@page "/Tecnico/Index"
@inject RegistroTecnicoPostgre.Services.TecnicoServices tecnicosService
@rendermode InteractiveServer
@attribute [StreamRendering(true)]

<PageTitle>Registro de Técnicos</PageTitle>
<div class="container">
    <div class="card shadow-lg">

        <div class="d-flex justify-content-center align-items-center mt-4">
            <h5 class="card-title mb-0">Consulta de Técnicos</h5>
        </div>

        <div class="card-body">

            <div class="row">
                <div class="col-3">
                    <label class="col-form-label"><strong>Filtrar por</strong></label>
                </div>
                <div class="col text-end">
                    <a href="/Tecnico/Create" class="btn btn-success">
                        <span class="bi bi-plus-square"></span> Crear
                    </a>
                </div>
            </div>

            <div class="row align-items-center mb-3">
                <div class="col-3">
                    <InputSelect class="form-select" @bind-Value="Filtro" @onchange="Ordenar">
                        <option value="TecnicoId" selected>TécnicoID</option>
                        <option value="Nombre">Nombre</option>
                    </InputSelect>
                </div>

                <div class="col-4">
                    <div class="input-group">
                        <input class="form-control" @bind="ValorFiltro" placeholder="Buscar por nombre" />
                        <button type="button" class="btn btn-primary" @onclick="Buscar">
                            <i class="bi bi-search me-1"></i> Buscar
                        </button>
                    </div>
                </div>
            </div>

            @if (isLoading)
            {
                <div class="text-center my-4">
                    <div class="spinner-border" role="status"></div>
                    <span class="ms-2">Cargando técnicos...</span>
                </div>
            }
            else
            {
                <table class="table table-hover">
                    <thead class="table table-striped text-black">
                        <tr>
                            <th>TecnicoId</th>
                            <th>Nombre</th>
                            <th>Sueldo</th>
                            <th>Editar</th>
                            <th>Borrar</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var tecnico in ListaTecnicos)
                        {
                            <tr>
                                <td> @tecnico.TecnicoId</td>
                                <td> @tecnico.Name</td>
                                <td>
                                    <span>@tecnico.sueldo.ToString("F2")</span>
                                </td>
                                <td>
                                    <a href="/Tecnico/Edit/@tecnico.TecnicoId" class="btn btn-outline-primary bi bi-pencil-square"></a>
                                </td>
                                <td>
                                    <button type="button" class="btn btn-danger bi bi-trash" @onclick="() => Eliminar(tecnico.TecnicoId)"> </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }

        </div>
    </div>
</div>

@code {
    public List<Tecnico> ListaTecnicos { get; set; } = new List<Tecnico>();
    public string Filtro { get; set; } = "TecnicoId";
    public string ValorFiltro { get; set; } = string.Empty;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        await CargarYOrdenar();
        isLoading = false;
        StateHasChanged();
    }

    private async Task CargarYOrdenar()
    {
        try
        {
            var lista = await tecnicosService.Listar(t => true);

            if (!string.IsNullOrWhiteSpace(ValorFiltro))
            {
                lista = lista
                    .Where(t => t.Name != null && t.Name.ToLower().Contains(ValorFiltro.ToLower()))
                    .ToList();
            }

            if (Filtro == "Nombre")
                ListaTecnicos = lista.OrderBy(t => t.Name).ToList();
            else
                ListaTecnicos = lista.OrderBy(t => t.TecnicoId).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar técnicos: {ex.Message}");
            ListaTecnicos = new List<Tecnico>();
        }
    }

    private async Task Buscar()
    {
        isLoading = true;
        await CargarYOrdenar();
        isLoading = false;
        StateHasChanged();
    }

    private async Task Ordenar(ChangeEventArgs e)
    {
        Filtro = e.Value?.ToString() ?? "TecnicoId";
        isLoading = true;
        await CargarYOrdenar();
        isLoading = false;
        StateHasChanged();
    }

    private async Task Eliminar(int id)
    {
        isLoading = true;
        var result = await tecnicosService.Eliminar(id);
        if (result)
        {
            await CargarYOrdenar();
        }
        isLoading = false;
        StateHasChanged();
    }
}